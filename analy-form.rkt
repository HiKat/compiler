#lang racket
(require (prefix-in k08: "kadai08.rkt"))
(require (prefix-in sem: "semantic-analy.rkt"))
(require (prefix-in stx: "mysyntax.rkt"))
(require parser-tools/lex
         (prefix-in : parser-tools/lex-sre)
         parser-tools/yacc)
(require "myenv.rkt")

(define (analy-form t)
  (begin (map form-check t)
         (display "OK! THIS PROGRAM IS IN A CORRECT FORM.")))

(define (form-check st)
  (cond 
    ((not (list? st)) (list st))
    ((stx:declaration_st? st) #t)
    ((stx:func_declarator_st? st) #t)
    ((stx:func_declarator_ast_st? st) #t)
    ((stx:func_proto_st? st) #t)
    ((stx:func_def_st? st) 
     (cond ((eq? 'nostat (stx:compound_st-statement-list 
                          (stx:func_def_st-compound-state-list st))) 
            #t)
           (else 
            (map form-check (stx:compound_st-statement-list 
                                  (stx:func_def_st-compound-state-list st))))))
    ((stx:assign_exp_st? st) 
     (begin (if (or (stx:unary_exp_st? (stx:assign_exp_st-dest st))
                    (cond ((obj? (stx:assign_exp_st-dest st)) 
                           (and (eq? 'var (obj-kind (stx:assign_exp_st-dest st)))
                                (eq? type_array? (obj-type (stx:assign_exp_st-dest st)))))
                          (else #f)))
                #t
                (error "ERROR! AN INVALID ASSIGN EXPRESSION FORM OF" st))
            (map form-check (stx:assign_exp_st-src st))))
    ((stx:logic_exp_st? st) 
     (begin (map form-check (stx:logic_exp_st-op1 st))
            (map form-check (stx:logic_exp_st-op2 st))))
    ((stx:rel_exp_st? st) 
     (begin (map form-check (stx:logic_exp_st-op1 st))
            (map form-check (stx:logic_exp_st-op2 st))))
    ((stx:alge_exp_st? st) 
     (begin (map form-check (stx:logic_exp_st-op1 st))
            (map form-check (stx:logic_exp_st-op2 st))))
    ((stx:spec_st? st) #t)
    ((stx:unary_exp_st? st) 
     (cond ((obj? (stx:unary_exp_st-op st)) 
            (cond ((eq? 'var (obj-kind (stx:unary_exp_st-op st)))
                   #t)
                  (else (error "ERROR! AN INVALID & FORM OF" st))))
           (else (error "ERROR! AN INVALID & FORM OF" st))))
    ((stx:constant_st? st) #t)
    ((stx:null_statement_st? st) #t)
    ((stx:exp_in_paren_st? st) 
     (map form-check (stx:exp_in_paren_st-exp st)))
    ((stx:if_else_st? st) 
     (begin (map form-check (stx:if_else_st-cond-exp st))
            (map form-check (stx:if_else_st-else-state st))))
    ((stx:while_st? st) 
     (begin (map form-check (stx:while_st-cond-exp st))
            (map form-check (stx:while_st-statement st))))
    ((stx:return_st? st) 
     (map form-check(stx:return_st-exp st)))
    ((stx:compound_st? st) 
     (map form-check (stx:compound_st-statement-list st)))
    ((stx:func_st? st) #t)
    ((obj? st) #t) 
    ((position? st) #t)
    (else (error "UNEXPECTED STRUCTURES IN AN ARGUMENT OF ANALY-FORM." st))))
    

;テスト
(define p (open-input-file "test01.c"))
(port-count-lines! p)
;(sem:sem-analyze-tree (k08:parse-port p))
(analy-form (sem:sem-analyze-tree (k08:parse-port p)))